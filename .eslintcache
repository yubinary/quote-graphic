[{"/Users/yubin/Desktop/yubinary/quote-graphic/src/index.js":"1","/Users/yubin/Desktop/yubinary/quote-graphic/src/reportWebVitals.js":"2","/Users/yubin/Desktop/yubinary/quote-graphic/src/App.js":"3","/Users/yubin/Desktop/yubinary/quote-graphic/src/pages/Home.js":"4","/Users/yubin/Desktop/yubinary/quote-graphic/src/components/Palette.js":"5","/Users/yubin/Desktop/yubinary/quote-graphic/src/components/Quote.js":"6"},{"size":500,"mtime":1610359848463,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1610359848464,"results":"9","hashOfConfig":"8"},{"size":130,"mtime":1610383481259,"results":"10","hashOfConfig":"8"},{"size":1961,"mtime":1610703917718,"results":"11","hashOfConfig":"8"},{"size":5869,"mtime":1610704010558,"results":"12","hashOfConfig":"8"},{"size":1169,"mtime":1610590254744,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"142uf9b",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"/Users/yubin/Desktop/yubinary/quote-graphic/src/index.js",[],["30","31"],"/Users/yubin/Desktop/yubinary/quote-graphic/src/reportWebVitals.js",[],"/Users/yubin/Desktop/yubinary/quote-graphic/src/App.js",[],"/Users/yubin/Desktop/yubinary/quote-graphic/src/pages/Home.js",[],"/Users/yubin/Desktop/yubinary/quote-graphic/src/components/Palette.js",["32","33"],"import React, { useState } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { BiHighlight, BiMinus, BiPlus } from 'react-icons/bi';\nimport { FiAlignLeft, FiAlignCenter, FiAlignRight } from 'react-icons/fi';\n\nimport transparent from \"./transparent.jpg\";\nimport Quote from \"./Quote.js\";\n\nimport '../styles/Palette.css';\n\nexport default function Palette({ fetchQuote, quote, image }) {\n  const [fontStyle, setFontStyle] = useState(\"Poppins\");\n  const [fontSize, setFontSize] = useState(15);\n  const [fontColor, setFontColor] = useState(\"\");\n  const [backgroundColor, setBackgroundColor] = useState(\"\");\n  const [isDisplay, setIsDisplay] = useState(false);\n  const [isHighlight, setIsHighlight] = useState(false);\n  const [isImage, setIsImage] = useState(false);\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [nthImage, setNthImage] = useState(0);\n  const [textAlign, setTextAlign] = useState(\"center\");\n\n\n  // decrease font size when clicked\n  function handleClickDecrement() {\n    if (fontSize > 10) {\n      setFontSize(fontSize - 1);\n    }\n  };\n\n  // increase font size when clicked\n  function handleClickIncrement() {\n    if (fontSize < 20) {\n      setFontSize(fontSize + 1);\n    }\n  };\n\n  // increase image order when clicked\n  function handleClickImage() {\n    if (nthImage === image.length - 1) {\n      setNthImage(0);\n    } else {\n      setNthImage(nthImage + 1);\n    }\n  };\n\n  // increase image order when clicked\n  function handleChangeColor(color) {\n    setBackgroundColor(color.rgb);\n    setImageUrl(\"\");\n  };\n\n  // display color picker when isDisplay is true\n  function displayColorPicker() {\n    if (isDisplay) {\n      return (\n        <ChromePicker\n          color={backgroundColor}\n          onChange={handleChangeColor}\n          className=\"color-modal\"\n        />\n      )\n    }\n  }\n\n  // increase image order when clicked\n  function handleClickTextAlign() {\n    if (textAlign === \"center\") {\n      setTextAlign(\"right\");\n    } else if (textAlign === \"right\") {\n      setTextAlign(\"left\");\n    } else {\n      setTextAlign(\"center\");\n    }\n  };\n\n  // display random images when isImage is true\n  function displayRandomImages() {\n    let currImage = image[nthImage];\n\n    if (isImage) {\n      return (\n        <div className=\"image-modal\">\n          <img src={currImage} className=\"image-preview\" />\n          <div className=\"image-button\">\n            <button className=\"use\" onClick={() => setImageUrl(currImage)}>Use Image</button>\n            <button onClick={handleClickImage}>Try Another</button>\n          </div>\n        </div>\n      )\n    }\n  }\n\n  // display text align icon\n  function displayTextAlignIcon() {\n    if (textAlign === \"center\") {\n      return (\n        <FiAlignCenter />\n      )\n    } else if (textAlign === \"left\") {\n      return (\n        <FiAlignLeft />\n      )\n    } else {\n      return (\n        <FiAlignRight />\n      )\n    }\n  }\n\n  // helper function that cleans color code for style\n  function makeRgb(color) {\n    let rgb = \"rgb(\";\n    for (var key in color) {\n      if (key !== \"a\") {\n        rgb += color[key] + \",\";\n      } else {\n        rgb += color[key];\n      }\n    }\n    return rgb + \")\";\n  }\n\n  if (imageUrl === \"\") {\n    var backgroundImageButtonStyle = {\n      backgroundImage: \"url(\" + transparent + \")\"\n    }\n  } else {\n    var backgroundImageButtonStyle = {\n      backgroundImage: \"url(\" + imageUrl + \")\",\n      backgroundSize: \"cover\",\n    }\n  }\n\n  var backgroundColorStyle = {\n    backgroundColor: makeRgb(backgroundColor)\n  }\n\n  return (\n    <div>\n      <div className=\"palette\">\n        <div className=\"palette-font-style\">\n          <select onChange={(event) => setFontStyle(event.target.value)}>\n            <option value=\"Poppins, sans-serif\">Poppins</option>\n            <option value=\"Georgia, serif\">Georgia</option>\n            <option value=\"Courier, monospace\">Courier</option>\n            <option value=\"Comic Sans MS, Comic Sans, cursive\">Comic Sans</option>\n            <option value=\"Times, Times New Roman, serif\">Times</option>\n            <option value=\"Arial Narrow, sans-serif\">Arial Narrow</option>\n          </select>\n          <div className=\"select-arrow\"></div>\n        </div>\n        <div className=\"palette-font-color\">\n          <select onChange={(event) => setFontColor(event.target.value)}>\n            <option value=\"black\">Black</option>\n            <option value=\"white\">White</option>\n          </select>\n          <div className=\"select-arrow\"></div>\n        </div>\n        <div className=\"palette-font-size\">\n          <button onClick={handleClickDecrement}><BiMinus /></button>\n          <p>{fontSize}px</p>\n          <button onClick={handleClickIncrement}><BiPlus /></button>\n        </div>\n\n        <div className=\"palette-background-color\">\n          <button\n            onClick={() => setIsDisplay(!isDisplay)}\n            style={backgroundColorStyle} />\n          {displayColorPicker()}\n        </div>\n        <div className=\"palette-background-image\">\n          <button onClick={() => setIsImage(!isImage)}\n            style={backgroundImageButtonStyle} />\n          {displayRandomImages()}\n        </div>\n        <button\n          className=\"palette-highlight\"\n          onClick={() => setIsHighlight(!isHighlight)}>\n          <BiHighlight />\n        </button>\n        <button\n          className=\"palette-text-align\"\n          onClick={handleClickTextAlign}>\n          {displayTextAlignIcon()}\n        </button>\n        <button\n          className=\"palette-new-quote\"\n          onClick={fetchQuote}>New Quote</button>\n      </div>\n      <Quote\n        quote={quote}\n        fontStyle={fontStyle}\n        fontSize={fontSize}\n        fontColor={fontColor}\n        backgroundColor={backgroundColor}\n        isHighlight={isHighlight}\n        imageUrl={imageUrl}\n        textAlign={textAlign}\n        makeRgb={makeRgb}\n      />\n    </div>\n  )\n}","/Users/yubin/Desktop/yubinary/quote-graphic/src/components/Quote.js",["34","35"],"import React from 'react';\nimport '../styles/Quote.css';\n\nexport default function Quote({\n  quote,\n  fontStyle,\n  fontSize,\n  fontColor,\n  backgroundColor,\n  isHighlight,\n  imageUrl,\n  textAlign,\n  makeRgb }) {\n\n  var quoteStyle = {\n    backgroundColor: makeRgb(backgroundColor),\n    backgroundImage: \"url(\" + imageUrl + \")\",\n    backgroundSize: \"cover\"\n  }\n\n  var quoteTextStyle = {\n    fontFamily: fontStyle,\n    fontSize: fontSize + 'px',\n    color: fontColor,\n    textAlign: textAlign\n    // textShadow: \"0px 2px 2px rgba(255, 255, 255, 0.4)\"\n  };\n\n  if (isHighlight) {\n    if (fontColor !== \"white\") {\n      var quoteH1Style = {\n        backgroundColor: \"white\"\n      };\n\n      var quotePStyle = {\n        backgroundColor: \"white\"\n      }\n    } else {\n      var quoteH1Style = {\n        backgroundColor: \"black\"\n      };\n\n      var quotePStyle = {\n        backgroundColor: \"black\"\n      }\n    }\n  }\n\n  return (\n    <div className=\"quote\" style={quoteStyle}>\n      <div className=\"quote-text\" style={quoteTextStyle}>\n        <h1 style={quoteH1Style}>{quote.content}</h1>\n        <br />\n        <p style={quotePStyle}>{quote.author}</p>\n      </div>\n    </div>\n  )\n}",["36","37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":84,"column":11,"nodeType":"44","endLine":84,"endColumn":60},{"ruleId":"45","severity":1,"message":"46","line":129,"column":9,"nodeType":"47","messageId":"48","endLine":129,"endColumn":35},{"ruleId":"45","severity":1,"message":"49","line":39,"column":11,"nodeType":"47","messageId":"48","endLine":39,"endColumn":23},{"ruleId":"45","severity":1,"message":"50","line":43,"column":11,"nodeType":"47","messageId":"48","endLine":43,"endColumn":22},{"ruleId":"38","replacedBy":"51"},{"ruleId":"40","replacedBy":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-redeclare","'backgroundImageButtonStyle' is already defined.","Identifier","redeclared","'quoteH1Style' is already defined.","'quotePStyle' is already defined.",["53"],["54"],"no-global-assign","no-unsafe-negation"]